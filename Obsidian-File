import xml.etree.ElementTree as ET


def parse_node(node, depth=0):
    """
    Recursive function to parse each node and convert to markdown format.
    """
    markdown = ''
    # Create markdown line for this node, indenting based on depth
    markdown += f"{'  ' * depth}- {node.get('TEXT')}\n"

    # Process child nodes recursively
    for child in node.findall('node'):
        markdown += parse_node(child, depth + 1)

    return markdown


def mm_to_markdown(file_path):
    """
    Reads an .mm file and converts its XML content to Markdown format.
    """
    try:
        # Parse the XML from the file
        tree = ET.parse(file_path)
        root = tree.getroot()

        # Assume that the root <map> element contains a single <node> child
        if root.tag == 'map':
            main_node = root.find('node')
            if main_node is not None:
                return parse_node(main_node)
        return "Invalid XML structure"
    except Exception as e:
        return f"An error occurred: {e}"


# File path to your .mm file
file_path = r'C:\Users\mypc\Desktop\Code camp.mm'

# Convert and print the markdown output
markdown_output = mm_to_markdown(file_path)
print(markdown_output)
#save this as a markdown file with the same name as freemind file
#Take a batch of freemind files and then convert those into multiple markdown files
#Handle the linking part
#Internet Links
#Desktop App Links
